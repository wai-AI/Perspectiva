import asyncio #–Ü–º–ø–æ—Ä—Ç–∏
import logging
import sys
from typing import Any, Dict
import requests
import json
import schedule 
import time
import datetime
import sqlite3
import os

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from aiogram.methods import SendMessage
from aiogram.types import FSInputFile, BufferedInputFile
from aiogram import Bot, Dispatcher, F, Router, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
    ContentType
)

form_router = Router() #–†–æ—É—Ç–µ—Ä

conn = sqlite3.connect("data.db")#Database
cursor = conn.cursor()

cursor.execute("""CREATE TABLE IF NOT EXISTS perspect (
    id      INTEGER PRIMARY KEY AUTOINCREMENT
                    UNIQUE
                    NOT NULL
                    DEFAULT (1),
    url     TEXT,
    time    TEXT    NOT NULL,
    caption TEXT    NOT NULL,
    who     INTEGER,
    [where] INTEGER
);""")

user_id = None
scheduler = AsyncIOScheduler()

with open('settings.json', 'r') as json_file: #–í–∏–≥—Ä—É–∑–∫–∞ –∑ –∫–æ–Ω—Ñ—ñ–≥—É —Ç–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö
    config = json.load(json_file)
TOKEN = config['TOKEN']
group_id = config['CHANNEL_ID']
allowed_users = config['ALLOWED_USERS']
path_to_photo = config['PATH_TO_PHOTO']
path_to_video = config['PATH_TO_VIDEO']
path_to_gif = config['PATH_TO_GIF']
admin = config['ADMIN_USER']

class Form(StatesGroup): #–ö–ª–∞—Å –∑—ñ —Å—Ç–µ–π—Ç–∞–º–∏
    AddUser = State()
    ChangeURL = State()

    ChangeURLPhoto = State()
    ChangeURLVideo = State()
    ChangeURLGif = State()

    ChangeID = State()
    DelUser = State()

    text = State()
    photo = State()
    time = State()
    check_state = State()

kb_photo = [[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏")]] #–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫—É —Ñ–æ—Ç–æ
photo_keyboard = ReplyKeyboardMarkup(keyboard=kb_photo, resize_keyboard=True, one_time_keyboard=True)

def admin_kb(): #–ê–¥–º—ñ–Ω—Å—å–∫–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
    kb_admin = [
        [InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–æ—Ç–∞", callback_data='AddUser')],
        [InlineKeyboardButton(text="üÜî –ó–º—ñ–Ω–∏—Ç–∏ ID –∫–∞–Ω–∞–ª—É", callback_data='ChangeID')],
        [InlineKeyboardButton(text="üîó –ó–º—ñ–Ω–∏—Ç–∏ —à–ª—è—Ö –¥–æ –º–µ–¥—ñ–∞-—Ä–µ—Å—É—Ä—Å—ñ–≤", callback_data='ChangePath')],
        [InlineKeyboardButton(text="‚ùå –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", callback_data='DelUser')],
        [InlineKeyboardButton(text="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞", callback_data='Restart')],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", callback_data='MainMenu')]
    ]
    keyboard_admin = InlineKeyboardMarkup(inline_keyboard=kb_admin)
    return keyboard_admin

def kb_back():
    back = [
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='Back')]
    ]
    keyboard_back = InlineKeyboardMarkup(inline_keyboard=back)
    return keyboard_back

def kb_with_path(): #–ö–ª–∞–≤–∞ –¥–ª—è –∑–º—ñ–Ω–∏ —à–ª—è—Ö—ñ–≤
    kb_path = [
        [InlineKeyboardButton(text="üì∑ –ó–º—ñ–Ω–∏—Ç–∏ —à–ª—è—Ö –¥–æ —Ñ–æ—Ç–æ", callback_data='ChangePathToPhoto')],
        [InlineKeyboardButton(text="üìπ –ó–º—ñ–Ω–∏—Ç–∏ —à–ª—è—Ö –¥–æ –≤—ñ–¥–µ–æ", callback_data='ChangePathToVideo')],
        [InlineKeyboardButton(text="üåÄ –ó–º—ñ–Ω–∏—Ç–∏ —à–ª—è—Ö –¥–æ –∞–Ω—ñ–º–∞—Ü—ñ–π", callback_data='ChangePathToGif')],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data='Back')]
    ]
    keyboard_path = InlineKeyboardMarkup(inline_keyboard=kb_path)
    return keyboard_path

def check_data(): #–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–∞–Ω–Ω–∏—Ö
    kb_list = [
        [InlineKeyboardButton(text="‚úÖ–í—Å–µ –≤—ñ—Ä–Ω–æ", callback_data='correct')],
        [InlineKeyboardButton(text="‚ùå–ó–∞–ø–æ–≤–Ω–∏—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É", callback_data='incorrect')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_list)
    return keyboard

def start_message(): #C—Ç–∞—Ä—Ç–æ–≤–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞
    kb_start = [
        [InlineKeyboardButton(text="‚úçÔ∏è–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç", callback_data='create_post')]
    ]
    keyboard_start = InlineKeyboardMarkup(inline_keyboard=kb_start)
    return keyboard_start

def get_path_to_file(file_type: str): #–û—Ç—Ä–∏–º—É—î–º–æ —à–ª—è—Ö –¥–æ –º–µ–¥—ñ–∞ –∑ –∫–æ–Ω—Ñ—ñ–≥—É
    with open('settings.json', 'r') as f:
        config = json.load(f)
    return config.get(f'PATH_TO_{file_type.upper()}')

def save_config(config): #–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ –∫–æ–Ω—Ñ—ñ–≥
    with open("settings.json", 'w') as json_file:
        json.dump(config, json_file, indent=4)

def telegraph_file_upload(path_to_file):  #–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–µ–¥—ñ–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞—Ñ
    '''
    Sends a file to telegra.ph storage and returns its url
    Works ONLY with 'gif', 'jpeg', 'jpg', 'png', 'mp4' 
    
    Parameters
    ---------------
    path_to_file -> str, path to a local file
    
    Return
    ---------------
    telegraph_url -> str, url of the file uploaded

    >>>telegraph_file_upload('test_image.jpg')
    https://telegra.ph/file/16016bafcf4eca0ce3e2b.jpg    
    >>>telegraph_file_upload('untitled.txt')
    error, txt-file can not be processed
    '''
    file_types = {'gif': 'image/gif', 'jpeg': 'image/jpeg', 'jpg': 'image/jpg', 'png': 'image/png', 'mp4': 'video/mp4'}
    file_ext = path_to_file.split('.')[-1]
    
    if file_ext in file_types:
        file_type = file_types[file_ext]
    else:
        return f'error, {file_ext}-file can not be proccessed' 
      
    with open(path_to_file, 'rb') as f:
        url = 'https://telegra.ph/upload'
        response = requests.post(url, files={'file': ('file', f, file_type)}, timeout=20)
    
    telegraph_url = json.loads(response.content)
    telegraph_url = telegraph_url[0]['src']
    telegraph_url = f'https://telegra.ph{telegraph_url}'
    return telegraph_url

async def load_config():
    with open('settings.json', 'r') as json_file:
        return json.load(json_file)

async def on_startup(bot: Bot) -> None:
    cursor.execute("SELECT DISTINCT who FROM perspect")
    users = cursor.fetchall()

    for user in users:
        user_id = user[0]
        try:
            await bot.send_message(user_id, "–î–æ–±—Ä–∏–π —Ä–∞–Ω–æ–∫! –ü–æ—á–∏–Ω–∞—î–º–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏")
        except Exception as e:
            bot.send_message(admin, f"–ù–µ –≤–¥–∞–ª–æ—Å—å –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è {user_id}. –ü—Ä–∏—á–∏–Ω–∞: <code>{e}</code>")

async def cmd_start(message: Message, state: FSMContext): #–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ State –≤ —Ä–∞–∑—ñ —è–∫–æ–≥–æ—Å—å –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥—É
    await state.clear()

async def change_url(message: Message, state: FSMContext, config_key: str, allowed_extensions: list) -> None:
    try:
        url_to_file = message.text.strip()
        if not url_to_file or not os.path.splitext(url_to_file)[1] in allowed_extensions:
            await message.answer("–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —à–ª—è—Ö. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return

        config[config_key] = url_to_file
        save_config(config)
        await message.answer(f"–®–ª—è—Ö –æ–Ω–æ–≤–ª–µ–Ω–æ")
        await message.answer("<b>–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é</b>", reply_markup=admin_kb())
        await state.clear()
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: {config_key}_ERR.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")

async def shledude_sender_for_database(message_id: int, bot: Bot, url: str, timestamp: datetime, caption: str, who: int):
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
        config = await load_config()
        location = config.get('CHANNEL_ID')
        
        if url:
            await bot.send_message(chat_id=location, text=f"<a href='{url}'> </a>{caption}")
        else:
            await bot.send_message(chat_id=location, text=caption)

        cursor.execute("DELETE FROM perspect WHERE id = ?", (message_id,))
        conn.commit()
    except Exception as e:
        cursor.execute("DELETE FROM perspect WHERE id = ?", (message_id,))
        conn.commit()
        await bot.send_message(chat_id=who, text=f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 2.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel)")

def shledude_sender_for_check_database(message_id: int, url: str, timestamp: datetime, caption: str, who: int, bot: Bot):
    scheduler.add_job(shledude_sender_for_database, "date", run_date=timestamp, args=(message_id, bot, url, timestamp, caption, who))

@form_router.message(lambda message: message.chat.id not in allowed_users) #–í—ñ–¥–∫–∏–¥—É–≤–∞–Ω–Ω—è –Ω–µ–ª–µ–≥–∞–ª—ñ–≤
async def unsuccessful_enter(message: Message):
    try:
        await message.answer("–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç—É. –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ - –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –±—É–¥—å –ª–∞—Å–∫–∞ –¥–æ @Zakhiel")
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 3.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel", parse_mode="HTML")


@form_router.message(CommandStart()) #–•–µ–Ω–¥–ª–µ—Ä —Å—Ç–∞—Ä—Ç
async def starting_message(message: Message) -> None:
    try:
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –¥—ñ—é, —è–∫—É –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏", reply_markup=start_message())
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 4.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")

@form_router.message(Command("cancel")) #–•–µ–Ω–¥–ª–µ—Ä cancel
async def starting_message(message: Message, state: FSMContext) -> None:
    try:
        await state.clear()
        await message.answer("–î—ñ—é —É—Å–ø—ñ—à–Ω–æ —Å–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=start_message())
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 5.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")        

@form_router.message(lambda message: message.chat.id in admin, Command("admin")) #–ê–¥–º—ñ–Ω—Å—å–∫–∏–π —Ö–µ–Ω–¥–ª–µ—Ä
async def unsuccessful_enter(message: Message):
    try:
        await message.answer("<b>–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é</b>", reply_markup=admin_kb())
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 6.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")        

@form_router.callback_query(lambda call: call.data == 'AddUser') #SET STATE FOR ADD USER
async def command_add_user(call: CallbackQuery, state: FSMContext) -> None:
    try:
        await call.message.delete()
        await state.set_state(Form.AddUser)
        await call.message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏", reply_markup=kb_back())
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 7.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")        

@form_router.callback_query(lambda call: call.data == 'ChangeID') #SET STATE FOR CHANGE ID
async def command_add_user(call: CallbackQuery, state: FSMContext) -> None:
    try:
        await call.message.delete()
        await state.set_state(Form.ChangeID)
        await call.message.answer(f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ ID –≥—Ä—É–ø–∏, –≤ —è–∫—ñ–π –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. \n \n <b>–ü–æ—Ç–æ—á–Ω–∏–π ID: {config['CHANNEL_ID']}</b>", reply_markup=kb_back())
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 8.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")        

@form_router.callback_query(lambda call: call.data == 'ChangePath') #SET STATE FOR CHANGE PATH
async def command_change_path(call: CallbackQuery, state: FSMContext) -> None:
    try: 
        await call.message.delete()
        await call.message.answer("–û–±–µ—Ä—ñ—Ç—å —è–∫–∏–π —à–ª—è—Ö –≤–∏ –±–∞–∂–∞—î—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏", reply_markup=kb_with_path())
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 9.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")

@form_router.callback_query(lambda call: call.data == 'ChangePathToPhoto') #SET STATE FOR CHANGE PATH PHOTO
async def command_change_path_to_photo(call: CallbackQuery, state: FSMContext) -> None:
    try: 
        await call.message.delete()
        await state.set_state(Form.ChangeURLPhoto)
        path = get_path_to_file('photo')
        await call.message.answer(f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —à–ª—è—Ö –≤ —Ñ–æ—Ä–º–∞—Ç—ñ: <b>Path/To/Photo.png</b>\n\n<b>–ü–æ—Ç–æ—á–Ω–∏–π —à–ª—è—Ö: </b><code>{path}</code>", reply_markup=kb_back())
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 10.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")        

@form_router.callback_query(lambda call: call.data == 'ChangePathToVideo') #SET STATE FOR CHANGE PATH VIDEO
async def command_change_path_to_video(call: CallbackQuery, state: FSMContext) -> None:
    try: 
        await call.message.delete()
        await state.set_state(Form.ChangeURLVideo)
        path = get_path_to_file('video')
        await call.message.answer(f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —à–ª—è—Ö –≤ —Ñ–æ—Ä–º–∞—Ç—ñ: <b>Path/To/Video.mp4</b>\n\n<b>–ü–æ—Ç–æ—á–Ω–∏–π —à–ª—è—Ö: </b><code>{path}</code>", reply_markup=kb_back())
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 11.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")    

@form_router.callback_query(lambda call: call.data == 'ChangePathToGif') #SET STATE FOR CHANGE PATH GIF
async def command_change_path_to_gif(call: CallbackQuery, state: FSMContext) -> None:
    try: 
        await call.message.delete()
        await state.set_state(Form.ChangeURLGif)
        path = get_path_to_file('gif')
        await call.message.answer(f"–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —à–ª—è—Ö –≤ —Ñ–æ—Ä–º–∞—Ç—ñ: <b>Path/To/Animation.gif</b>\n\n<b>–ü–æ—Ç–æ—á–Ω–∏–π —à–ª—è—Ö: </b><code>{path}</code>", reply_markup=kb_back())
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 12.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")    

@form_router.callback_query(lambda call: call.data == 'DelUser') #SET STATE FOR DELETE USER
async def command_change_path(call: CallbackQuery, state: FSMContext) -> None:
    try:
        await call.message.delete()
        await state.set_state(Form.DelUser)
        await call.message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ç—Ä–µ–±–∞ –≤–∏–¥–∞–ª–∏—Ç–∏", reply_markup=kb_back())
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 13.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")        

@form_router.callback_query(lambda call: call.data == 'MainMenu') #GO TO MAIN MENU
async def command_change_path(call: CallbackQuery) -> None:
    try:
        await call.message.delete()
        await call.message.answer("–í–∏ –ø–µ—Ä–µ–π—à–ª–∏ –≤ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", reply_markup=start_message())
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 14.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")        

@form_router.callback_query(lambda call: call.data == 'Back') #GO TO BACK ADMIN MENU
async def command_change_path(call: CallbackQuery) -> None:
    try:
        await call.message.delete()
        await call.message.answer("–ù–∞–∑–∞–¥", reply_markup=admin_kb())
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 15.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")        

@form_router.callback_query(lambda call: call.data == 'Restart') #RESTART SYSTEM
async def command_restart(call: CallbackQuery) -> None:
    try:
        await call.message.delete()
        await call.message.answer("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ —Å–µ—Ä–≤–µ—Ä")
        os.system("shutdown /r /t 0")
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 16.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")        

@form_router.message(Form.AddUser, F.text) #ADDING USER
async def command_add_user(message: Message, state: FSMContext) -> None:
    try:
        if not message.text.isdigit():
            await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è")
            return

        User = int(message.text)
        if User in config['ALLOWED_USERS']:
            await message.answer("–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —î —É —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö.")
            return
        else:
            await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ")
            await message.answer("<b>–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é</b>", reply_markup=admin_kb())
            allowed_users.append(User)
            with open("settings.json", 'w') as json_file:
                json.dump(config, json_file, indent=4)
            await state.clear()
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 17.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")

@form_router.message(Form.ChangeID, F.text) #CHANGE GROUP ID
async def command_change_id(message: Message, state: FSMContext) -> None:
    try:
        if not message.text.lstrip('-').isdigit():
            await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è")
            return
        IdChannel = int(message.text)
        if IdChannel == int(config['CHANNEL_ID']):
            await message.answer("–¶–µ–π ID –≤–∂–µ —î –≤ –±–∞–∑—ñ, —Å–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —ñ–Ω—à–∏–π")
            return
        else: 
            config['CHANNEL_ID'] = str(IdChannel)
            save_config(config)
            await message.answer(f"ID –≥—Ä—É–ø–∏ —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ")
            await message.answer("<b>–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é</b>", reply_markup=admin_kb())
            await state.clear()
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 18.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")                

@form_router.message(Form.ChangeURLPhoto, F.text)  # CHANGE PATH TO PHOTO
async def command_change_url_photo(message: Message, state: FSMContext) -> None:
    try:
        await change_url(message, state, 'PATH_TO_PHOTO', ['.png', '.jpg', '.jpeg'])
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 19.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")                

@form_router.message(Form.ChangeURLVideo, F.text)  # CHANGE PATH TO VIDEO
async def command_change_url_video(message: Message, state: FSMContext) -> None:
    try:
        await change_url(message, state, 'PATH_TO_VIDEO', ['.mp4'])
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 20.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel") 

@form_router.message(Form.ChangeURLGif, F.text)  # CHANGE PATH TO GIF
async def command_change_url_gif(message: Message, state: FSMContext) -> None:
    try:
        await change_url(message, state, 'PATH_TO_GIF', ['.gif'])
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 21.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel") 

@form_router.message(Form.DelUser, F.text) #DELETE USER
async def command_add_user(message: Message, state: FSMContext) -> None:
    try:
        if not message.text.isdigit():
            await message.answer("–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è")
            return
        UserDel = int(message.text)
        if UserDel not in config['ALLOWED_USERS']:
            await message.answer("–¶—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î —É —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö.")
            return
        else:
            await message.answer(f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ")
            await message.answer("<b>–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é</b>", reply_markup=admin_kb())
            allowed_users.remove(UserDel)
            with open("settings.json", 'w') as json_file:
                json.dump(config, json_file, indent=4)
            await state.clear()
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 22.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")        

@form_router.callback_query(lambda call: call.data == 'create_post') #CREATE POST
async def command_start_handler(call: CallbackQuery, state: FSMContext) -> None:
    try:
        await call.message.delete()
        await state.set_state(Form.text)
        await call.message.answer("–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Ç–µ–∫—Å—Ç, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ñ", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 23.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")        

@form_router.message(Form.text, F.text) #–ó—á–∏—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
async def process_name(message: Message, state: FSMContext) -> None:
    try:
        text = message.html_text
        prohibited = set('/$%^\\[]+=`~<>|')

        if any(char in prohibited for char in message.text): #–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏
            await message.answer("–£ –≤–∞—Å –≤ —Ç–µ–∫—Å—Ç—ñ –Ω–∞—è–≤–Ω—ñ –∑–∞–±–æ—Ä–æ–Ω–µ–Ω—ñ —Å–∏–º–≤–æ–ª–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞ –∑–Ω–æ–≤—É")
            await state.set_state(Form.text)
            return

        await state.update_data(text=text)
        await state.set_state(Form.photo)
        await message.answer(f"{text}")
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ/–≤—ñ–¥–µ–æ/–∞–Ω—ñ–º–∞—Ü—ñ—é, —è–∫—É –±–∞–∂–∞—î—Ç–µ –ø—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ –¥–æ –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó. –Ø–∫—â–æ –º–µ–¥—ñ–∞—Ñ–∞–π–ª –Ω–µ —Ç—Ä–µ–±–∞ - –Ω–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å <b>'–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'</b>", reply_markup=photo_keyboard)
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 24.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")        

@form_router.message(Form.text, F.content_type != ContentType.TEXT) #–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ù–ï —Ç–µ–∫—Å—Ç—É
async def error_text(message: Message) -> None:
    try:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ç–µ–∫—Å—Ç")
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 25.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")        

@form_router.message(F.text.lower() == ('–ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏'), Form.photo) #–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è —Å–∫—ñ–ø–∞–Ω–Ω—è —Ñ–æ—Ç–æ
async def start_questionnaire_process(message: Message, state: FSMContext):
    try:
        await message.answer("–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –±—É–¥–µ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –±–µ–∑ –º–µ–¥—ñ–∞—Ñ–∞–π–ª—É")
        await state.update_data(photo=None)
        await state.set_state(Form.time)
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ —Ñ–æ—Ä–º–∞—Ç—ñ 10 08 10 00 (10 —Å–µ—Ä–ø–Ω—è 10:00)", reply_markup=ReplyKeyboardRemove())
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 26.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")        

@form_router.message(
        lambda message: message.content_type in [
            ContentType.ANIMATION, 
            ContentType.VIDEO, 
            ContentType.PHOTO
            ]
            , Form.photo)

async def start_questionnaire_process(message: Message, state: FSMContext):
    try:
        file_id = None
        try:
            if message.photo:
                file_id = message.photo[-1].file_id
                path = get_path_to_file('photo')
            elif message.video:
                file_id = message.video.file_id
                path = get_path_to_file('video')
            elif message.animation: 
                file_id = message.animation.file_id
                path = get_path_to_file('gif')
            else:
                await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ, –≤—ñ–¥–µ–æ –∞–±–æ –∞–Ω—ñ–º–∞—Ü—ñ—é.")
                return

            #–û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ—É –ø—Ä–æ —Ñ–∞–π–ª
            file_info = await message.bot.get_file(file_id)
            file_size = file_info.file_size


            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –π–æ–≥–æ —Ä–æ–∑–º—ñ—Ä
            if file_size >= 5 * 1024 * 1024:  # 5 –ú–ë –≤ –±–∞–π—Ç–∞—Ö
                await message.answer("–§–∞–π–ª –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π. –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–∞–π–ª —Ä–æ–∑–º—ñ—Ä–æ–º –Ω–µ –±—ñ–ª—å—à–µ 5 –ú–ë.")
                return
            
            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –Ω–∞ —Å–µ—Ä–≤–∞–∫
            await message.bot.download_file(file_info.file_path, destination=path)
            url = telegraph_file_upload(path)
            await state.update_data(photo=url)

            await state.set_state(Form.time)
            await message.answer("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —Ç–∞ —á–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –≤ —Ñ–æ—Ä–º–∞—Ç—ñ 10 08 10 00 (10 —Å–µ—Ä–ø–Ω—è 10:00)", reply_markup=ReplyKeyboardRemove())
        except:
            await message.answer("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É. –°–ø—Ä–æ–±—É–π—Ç–µ –±—É–¥—å –ª–∞—Å–∫–∞ —ñ–Ω—à–∏–π")
            return
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 27.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")        

@form_router.message(
    lambda message: message.content_type in [
        ContentType.TEXT,
        ContentType.STICKER,
        ContentType.DOCUMENT, #–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ù–ï –º–µ–¥—ñ–∞ –¥–∞–Ω–Ω–∏—Ö
        ContentType.AUDIO, 
        ContentType.VOICE 
    ],
    Form.photo)
async def start_questionnaire_process(message: Message, state: FSMContext):
    try:
        await message.answer('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ —Ñ–æ—Ç–æ,–≤—ñ–¥–µ–æ –∞–±–æ –∞–Ω—ñ–º–∞—Ü—ñ—é!')
        await state.set_state(Form.photo)
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 28.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")        

@form_router.message(F.content_type != ContentType.TEXT, Form.time) #–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–∞—Ç—É –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å
async def time_sheldude(message: Message, state: FSMContext):
    try:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ '<b>–¥–µ–Ω—å –º—ñ—Å—è—Ü—å –≥–æ–¥–∏–Ω–∞ —Ö–≤–∏–ª–∏–Ω–∞</b>'.", reply_markup=ReplyKeyboardRemove())
        await state.set_state(Form.time)
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 29.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")        

@form_router.message(F.content_type == ContentType.TEXT, Form.time) #–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó –¥–∞—Ç–∏
async def time_sheldude(message: Message, state: FSMContext):
    try:
        try:
            timer = message.text
            year = datetime.datetime.now().year #–©–µ –∫—É–ø–∞ –∑–º—ñ–Ω–Ω–∏—Ö

            day, month, hour, minute = map(int, timer.split())
            
            year = datetime.datetime.now().year
            user_datetime = datetime.datetime(year, month, day, hour, minute)

            now = datetime.datetime.now()

            data = await state.get_data()
            caption = data.get("text")

            if user_datetime < now + datetime.timedelta(minutes=1): #–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è —á–∞—Å—É
                await message.answer("–ß–∞—Å –ø–ª–∞–Ω—É–≤–∞–Ω–Ω—è –ø—É–±–ª—ñ–∫–∞—Ü—ñ—ó –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —è–∫ –º—ñ–Ω—ñ–º—É–º –Ω–∞ 1 —Ö–≤–∏–ª–∏–Ω—É –±—ñ–ª—å—à–µ –≤—ñ–¥ —á–∞—Å—É –ø–æ—Ç–æ—á–Ω–æ–≥–æ")
                    
            else:
                await state.update_data(datetime=user_datetime)
                await state.update_data(time=user_datetime)
                await message.answer(f"–ü—É–±–ª—ñ–∫–∞—Ü—ñ—è –±—É–¥–µ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∞ <b>{user_datetime}</b> ") #–ü–ª–∞–Ω—É—î–º–æ –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∏–π —á–∞—Å –ø—É–±–ª—ñ–∫–∞—Ü—ñ—é
                await message.answer("<b>–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –≤—Å–µ –≤—ñ—Ä–Ω–æ</b>")
                if data.get("photo") != None:
                    #url = telegraph_file_upload(path) –°—Ç–∞—Ä–∞ —Å—Ç—Ä–æ–∫–∞, –ø–æ—Ç—ñ–º –≤–∏–¥–∞–ª—é —è–∫ –ø–µ—Ä–µ–≤—ñ—Ä—é —á–∏ –ø–æ—Ñ—ñ–∫—Å–∏–≤—Å—è –±–∞–≥
                    url = data.get("photo")
                    await message.answer(f"<a href='{url}'> </a>{caption}", parse_mode="HTML", reply_markup=check_data())
                elif data.get("photo") == None:
                    await message.answer(f"{caption}", parse_mode="HTML", reply_markup=check_data())

                await state.set_state(Form.check_state)
                    
        except ValueError: #–ü—Ä–æ—Å—Ç–æ –µ–∫—Å–µ–ø—à–Ω
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç—ñ '<b>–¥–µ–Ω—å –º—ñ—Å—è—Ü—å –≥–æ–¥–∏–Ω–∞ —Ö–≤–∏–ª–∏–Ω–∞</b>'.")
            await state.set_state(Form.time)
    except Exception as e:
        await message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 30.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")

@form_router.callback_query(F.data == 'correct', Form.check_state) #–Ø–∫—â–æ –∫–æ—Ä—Ä–µ–∫—Ç, —Ç–æ –ø–ª–∞–Ω—É—î–º–æ –Ω–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
async def start_questionnaire_process(call: CallbackQuery, bot: Bot, state: FSMContext):
    try:

        await call.answer('–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ')
        data = await state.get_data()

        caption = data.get("text")
        run_date = data.get("time")
        url = data.get("photo")

        user_id = call.from_user.id

        await call.message.edit_reply_markup(reply_markup=None)
        
        sent_message = await call.message.answer(f'–ü–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ –Ω–∞ <b>{run_date}</b>.')
        message_id = sent_message.message_id

        cursor.execute("""INSERT INTO perspect (id, url, time, caption, who, [where]) VALUES (?,?,?,?,?,?)""", (message_id, url, run_date, caption, user_id, group_id,))
        conn.commit()

        await call.message.answer("–û–±–µ—Ä—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ –¥—ñ—é, —è–∫—É –±–∞–∂–∞—î—Ç–µ –∑—Ä–æ–±–∏—Ç–∏", reply_markup=start_message())
        
        shledude_sender_for_check_database(message_id, url, run_date, caption, user_id, bot)
        await state.clear()
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 31.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")

@form_router.callback_query(F.data == 'incorrect', Form.check_state) #–Ø–∫—â–æ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç - –ø–æ –Ω–æ–≤—ñ–π
async def start_questionnaire_process(call: CallbackQuery, state: FSMContext):
    try:
        await call.answer('–ü–æ—á–∏–Ω–∞—î–º–æ –∑–Ω–æ–≤—É')
        await call.message.edit_reply_markup(reply_markup=None)
        await state.clear()
        await call.message.answer('–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ —Ç–µ–∫—Å—Ç, —è–∫–∏–π —Ö–æ—á–µ—Ç–µ —Ä–æ–∑–º—ñ—Å—Ç–∏—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ñ')
        await state.set_state(Form.text)
    except Exception as e:
        await call.message.answer(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: <code>{e}</code>. <b>ID: 32.</b> –ó–∞–¥–ª—è —ó—ó –≤–∏—Ä—ñ—à–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ @Zakhiel")

async def main():
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher()
    dp.include_router(form_router)
    scheduler.start()

    dp.startup.register(on_startup)

    async def process_perspect():
        cursor.execute("SELECT * FROM perspect ORDER BY time ASC")
        rows = cursor.fetchall()

        for row in rows:
            message_id, url, timestamp_str, caption, who, location = row
            timestamp = datetime.datetime.strptime(timestamp_str, '%Y-%m-%d %H:%M:%S')

            if timestamp < datetime.datetime.now():
                cursor.execute("DELETE FROM perspect WHERE id = ?", (message_id,))
                conn.commit()
                await bot.send_message(int(who), f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ –Ω–∞ <b>{timestamp_str}</b> –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—Ä–æ—á–∫—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞–ø–ª–∞–Ω—É–π—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑–Ω–æ–≤—É")

            else:
                job_id = f"job_{message_id}"
                if not scheduler.get_job(job_id):

                    scheduler.add_job(
                        shledude_sender_for_database,
                        "date",
                        run_date=timestamp,
                        args=[message_id, bot, url, timestamp, caption, who],
                        id=job_id
                    )
                    print(f"–ó–∞–¥–∞—á–∞ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ ID {message_id} –¥–æ–¥–∞–Ω–∞ –≤ —Ä–æ–∑–∫–ª–∞–¥ –ø—É–±–ª—ñ–∫–∞—Ü—ñ–π.")

    await process_perspect()

    await dp.start_polling(bot)

if __name__ == "__main__": #–Ü –∑–∞–ø—É—Å–∫–∞—î–º–æ –Ü–π–æ–≥–æ
    logging.basicConfig(filename="logs.txt",
                    filemode='w',
                    format='%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s',
                    datefmt='%H:%M:%S',
                    level=logging.INFO)

    logging.info("Running Logging")

    logger = logging.getLogger('Logger')

    asyncio.run(main())
